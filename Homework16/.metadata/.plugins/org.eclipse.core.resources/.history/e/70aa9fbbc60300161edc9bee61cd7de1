package VideoStore;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.Scanner;

public class MainClass {

	public static Connection connection = null;
	public static PreparedStatement prst = null;
	public static ResultSet rs = null;

	public static void main(String[] args) {
		try {
			Class.forName("com.mysql.jdbc.Driver");
		} catch (ClassNotFoundException cnfe) {
			System.out.println("MySQL JDBC Driver not found !!");
			return;
		}

		try {
			connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/videostore", "root", "841952");

			menu();
		} catch (SQLException e) {
			System.out.println("Connection Failed! Check output console");
		} finally {
			try {
				if (connection != null) {
					connection.close();
				}
			} catch (SQLException e) {
				System.out.println("Connection didn't closed !!");
				e.printStackTrace();
			}
		}
	}

	public static void menu() {
		Scanner sc = new Scanner(System.in);
		int choice = 0;
		do {
			System.out.println("Меню:\n1.Наличност.\n2.Взимане.\n3.Връщане.\n4.Информация.\n5.Изход.");
			System.out.print("Въведете избор: ");
			choice = sc.nextInt();
			switch (choice) {
			case 1:
				showTitles();
				break;
			case 2:
				clientTakes();
				break;
			case 3:
				clientReturns();
				break;
			case 4:
				showInfromation();
				break;
			default:
				break;
			}
		} while (choice > 0 && choice < 4);
	}

	private static void showTitles() {
		try {
			String queryString = "SELECT * FROM videos WHERE quantity > 0;";
			prst = connection.prepareStatement(queryString);
			rs = prst.executeQuery();
			System.out.println("\nНалични филми: ");
			System.out.println("ID |Заглавие:                     |Брой");
			System.out.println("---|------------------------------|----");
			while (rs.next()) {
				int id = rs.getInt("id");
				String title = rs.getString("title");
				int quantity = rs.getInt("quantity");
				System.out.println(String.format("%-3d|%-30s|%-4d", id, title, quantity));
			}
			System.out.println("---|------------------------------|----\n");

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	private static void showClients() {
		// TODO Auto-generated method stub
		try {
			String queryString = "SELECT * FROM clients";
			prst = connection.prepareStatement(queryString);
			rs = prst.executeQuery();
			System.out.println("\nКлиенти:");
			System.out.println("ID |Име:                          |Заети филми|Глоба");
			System.out.println("---|------------------------------|-----------|-----");
			while (rs.next()) {
				int id_User = rs.getInt("id");
				String fullName = rs.getString("fullName");
				int filmsCounter = rs.getInt("filmsCounter");
				int penalty = rs.getInt("penalty");
				System.out.println(String.format("%-3d|%-30s|%-11d|%-5d", id_User, fullName, filmsCounter, penalty));
			}
			System.out.println("---|------------------------------|-----------|-----\n");

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private static void showInfromation() {
		// TODO Auto-generated method stub
		try {
			String queryString = "SELECT information.id,clients.fullName AS fullname,videos.title AS title, information.dateTaken, information.dateReturn FROM information JOIN clients ON (information.client_id = clients.id) JOIN videos ON (information.film_id = videos.id);";
			prst = connection.prepareStatement(queryString);
			rs = prst.executeQuery();
			System.out.println("\nИнформация:");
			System.out.println("   |                    |                              |  Дата на  |  Дата на");
			System.out.println("Id |Име на клиент       |Име на заетия филм            |  заемане  |  връщане");
			System.out.println("---|--------------------|------------------------------|-----------|-----------");
			while (rs.next()) {
				int id = rs.getInt("id");
				String clientName = rs.getString("fullName");
				String movieName = rs.getString("title");
				Date dateTaken = rs.getDate("dateTaken");
				Date dateReturn = rs.getDate("dateReturn");
				System.out.println(String.format("%-3d|%-20s|%-30s|%-11s|%-10s", id, clientName, movieName,
						dateTaken, dateReturn));
			}
			System.out.println("---|--------------------|------------------------------|-----------|-----------\n");

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private static void clientTakes() {
		try {
			String updateUser = "UPDATE clients SET filmsCounter = ? WHERE id = ?";
			String updateFilm = "UPDATE videos SET quantity = ? WHERE id = ?";
			String updateInfo = "INSERT INTO information (client_id, film_id) VALUES(?,?)";
			showClients();
			User user = new User();
			user = getUserInfo();
			if (user.getFilmsCounter() < 5) {
				showTitles();
				Movie movie = new Movie();
				movie = getMovieInfo();
				prst = connection.prepareStatement(updateUser);
				prst.setInt(1, user.getFilmsCounter() + 1);
				prst.setInt(2, user.getId());
				prst.execute();
				prst = connection.prepareStatement(updateFilm);
				prst.setInt(1, movie.getQuantity() - 1);
				prst.setInt(2, movie.getId());
				prst.execute();
				prst = connection.prepareStatement(updateInfo);
				prst.setInt(1, user.getId());
				prst.setInt(2, movie.getId());
				prst.execute();
				System.out.println("Потребител " + user.getFullName() + " зае филм \"" + movie.getTitle() + "\"." );
			} else {
				System.out.println("Потребителят няма право да заема повече филми!!");
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}

	}

	private static void clientReturns() {
		
		try {
			String deleteInfo = "DELETE FROM information WHERE information.client_id = ? AND information.film_id = ?;";
			String updateClient = "UPDATE clients SET filmsCounter = filmsCounter - 1 WHERE id = ?;";
			String updateMovie = "UPDATE videos SET quantity = quantity + 1 WHERE id = ?;";
			Info info = new Info();
			info = getInfo();
			prst = connection.prepareStatement(deleteInfo);
			prst.setInt(1, info.getClientId());
			prst.setInt(2, info.getMovieId());
			prst.execute();
			prst = connection.prepareStatement(updateClient);
			prst.setInt(1, info.getClientId());
			prst.execute();
			prst = connection.prepareStatement(updateMovie);
			prst.setInt(1, info.getMovieId());
			prst.execute();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	private static User getUserInfo() {
		User user = null;
		try {
			Scanner sc = new Scanner(System.in);
			System.out.print("Въведете \"id\" на клиент: ");
			int clientID = sc.nextInt();
			String getUser = "SELECT * FROM clients where id = ?;";
			user = new User();
			prst = connection.prepareStatement(getUser);
			prst.setInt(1, clientID);
			rs = prst.executeQuery();
			if (rs.next()) {
				user.setId(rs.getInt("id"));
				user.setFullName(rs.getString("fullName"));
				user.setFilmsCounter(rs.getInt("filmsCounter"));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return user;
	}

	private static Movie getMovieInfo() {
		Movie movie = null;
		try {
			Scanner sc = new Scanner(System.in);
			System.out.print("Въведете \"id\" на филм: ");
			int filmID = sc.nextInt();
			String getFilm = "SELECT id,quantity FROM videos WHERE id = ?;";
			movie = new Movie();
			prst = connection.prepareStatement(getFilm);
			prst.setInt(1, filmID);
			rs = prst.executeQuery();
			if (rs.next()) {
				movie.setId(rs.getInt("id"));
				movie.setTitle(rs.getString("title"));
				movie.setQuantity(rs.getInt("quantity"));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return movie;
	}

	private static Info getInfo() {
		Info info = null;
		try {
			Scanner sc = new Scanner(System.in);
			showClients();
			System.out.print("Въведете \"id\" на клиент: ");
			int clientID = sc.nextInt();
			showTitles();
			System.out.print("Въведете \"id\" на филм: ");
			int filmID = sc.nextInt();
			String getInfo = "SELECT * FROM information WHERE information.client_id = ? AND information.film_id = ?;";
			info = new Info();
			prst = connection.prepareStatement(getInfo);
			prst.setInt(1, clientID);
			prst.setInt(2, filmID);
			rs = prst.executeQuery();
			if (rs.next()) {
				info.setId(rs.getInt("id"));
				info.setClientId(rs.getInt("client_id"));
				info.setMovieId(rs.getInt("film_id"));
				info.setDateEnter(rs.getDate("dateTaken"));
				info.setDateReturn(rs.getDate("dateReturn"));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return info;
	}
}
